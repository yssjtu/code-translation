@Override public void serialize(ILittleEndianOutput out1) { out1.writeShort(field_1_vcenter); }
public void addAll(BlockList<T> src) { if (src.size == 0) { return; } int srcDirIdx = 0; for (; srcDirIdx < src.tailDirIdx; srcDirIdx++) { addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE); } if (src.tailBlkIdx != 0) { addAll(src.tailBlock, 0, src.tailBlkIdx); } }
public void write(byte b) { if (outerInstance.upto == outerInstance.blockSize) { if (outerInstance.currentBlock != null) { outerInstance.blocks.add(outerInstance.currentBlock); outerInstance.blockEnd.add(outerInstance.upto); } outerInstance.currentBlock = new byte[outerInstance.blockSize]; outerInstance.upto = 0; } outerInstance.currentBlock[outerInstance.upto++] = b; }
public ObjectId getObjectId() { return objectId; }
public DeleteDomainEntryResult deleteDomainEntry(DeleteDomainEntryRequest request) { request = beforeClientExecution(request); return executeDeleteDomainEntry(request); }
public long ramBytesUsed() { return fst == null ? 0 : fst.getSizeInBytes(); }
public String getFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.tagMessage(raw, 0); if (msgB < 0) { return ""; } Charset charset = RawParseUtils.parseEncoding(raw); return RawParseUtils.decode(charset, raw, msgB, raw.length); }
public POIFSFileSystem() { HeaderBlock headerBlock = new HeaderBlock(bigBlockSize); _property_table = new PropertyTable(headerBlock); _documents = new ArrayList<>(); _root = null; }
public void init(int address) { slice = pool.getBuffer(address >> ByteBlockPool.BYTE_BLOCK_SHIFT); assert slice != null; upto = address & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = address; assert upto < slice.length; }
public SubmoduleAddCommand setPath(String path) { this.path = path; return this; }
public ListIngestionsResponse listIngestions(ListIngestionsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(ListIngestionsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(ListIngestionsResponseUnmarshaller.getInstance()); return invoke(request, options, ListIngestionsResponse.class); }
public QueryParserTokenManager(CharStream stream, int lexState) { super(stream); SwitchTo(lexState); }
public GetShardIteratorResult getShardIterator(GetShardIteratorRequest request) { request = beforeClientExecution(request); return executeGetShardIterator(request); }
public ModifyStrategyRequest() { super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis", "openAPI"); setMethod(MethodType.POST); }
public synchronized boolean ready() throws IOException { if (@in == null) { throw new IOException("InputStreamReader is closed"); } try { return bytes.hasRemaining() || @in.available() > 0; } catch (IOException e) { return false; } }
protected EscherOptRecord getOptRecord() {return _optRecord;}
public synchronized int read(byte[] buffer, int offset, int length) throws IOException { if (buffer == null) { throw new NullPointerException("buffer == null"); } if (offset < 0 || length < 0 || length > buffer.length - offset) { throw new IndexOutOfBoundsException(); } if (length == 0) { return 0; } if (pos == count && fillBuffer() == -1) { return -1; } int copylen = Math.min(count - pos, length); System.arraycopy(this.buffer, pos, buffer, offset, copylen); pos += copylen; return copylen; }
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) { this.sentenceOp = sentenceOp; }
public void print(String str) throws IOException { write(str != null ? str : String.valueOf((Object)null)); }
public NotImplementedFunctionException(String functionName, NotImplementedException cause) { super(functionName, cause); this.functionName = functionName; }
public V next() { return nextEntry().value; }
public void ReadBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException { int available = bufferLength - bufferPosition; if (len <= available) { if (len > 0) { System.arraycopy(m_buffer, bufferPosition, b, offset, len); } bufferPosition += len; } else { if (available > 0) { System.arraycopy(m_buffer, bufferPosition, b, offset, available); offset += available; len -= available; bufferPosition += available; } if (useBuffer && len < bufferSize) { Refill(); if (bufferLength < len) { System.arraycopy(m_buffer, 0, b, offset, bufferLength); throw new EOFException("read past EOF: " + this); } else { System.arraycopy(m_buffer, 0, b, offset, len); bufferPosition = len; } } else { long after = bufferStart + bufferPosition + len; if (after > Length) { throw new EOFException("read past EOF: " + this); } ReadInternal(b, offset, len); bufferStart = after; bufferPosition = 0; bufferLength = 0; } } }
public TagQueueResponse tagQueue(TagQueueRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(TagQueueRequestMarshaller.getInstance()); options.setResponseUnmarshaller(TagQueueResponseUnmarshaller.getInstance()); return invoke(request, options, TagQueueResponse.class); }
@Override public void remove() { throw new UnsupportedOperationException(); }
public ModifyCacheSubnetGroupResult modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { request = beforeClientExecution(request); return executeModifyCacheSubnetGroup(request); }
@Override public void setParams(String params) { super.setParams(params); culture = ""; String ignore; StringTokenizer st = new StringTokenizer(params, ","); if (st.hasMoreTokens()) { culture = st.nextToken(); } if (st.hasMoreTokens()) { culture += "-" + st.nextToken(); } if (st.hasMoreTokens()) { ignore = st.nextToken(); } }
public DeleteDocumentationVersionResponse deleteDocumentationVersion(DeleteDocumentationVersionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DeleteDocumentationVersionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DeleteDocumentationVersionResponseUnmarshaller.getInstance()); return invoke(request, options, DeleteDocumentationVersionResponse.class); }
@Override public boolean equals(Object obj) { if (!(obj instanceof FacetLabel)) { return false; } FacetLabel other = (FacetLabel) obj; if (length != other.length) { return false; } for (int i = length - 1; i >= 0; i--) { if (!components[i].equals(other.components[i])) { return false; } } return true; }
public GetInstanceAccessDetailsResult getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {request = beforeClientExecution(request);return executeGetInstanceAccessDetails(request);}
public HSSFPolygon createPolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.setParent(this); shape.setAnchor(anchor); shapes.add(shape); onCreate(shape); return shape; }
public String getSheetName(int sheetIndex) { return getBoundSheetRec(sheetIndex).getSheetname(); }
public GetDashboardResult getDashboard(GetDashboardRequest request) { request = beforeClientExecution(request); return executeGetDashboard(request); }
public AssociateSigninDelegateGroupsWithAccountResponse associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) { InvokeRequest<AssociateSigninDelegateGroupsWithAccountRequest> req = new InvokeRequest<>( request, getSigninDelegateGroupsWithAccountRequestMarshaller(), getSigninDelegateGroupsWithAccountResponseUnmarshaller()); return invoke(req); }
public void addMultipleBlanks(MulBlankRecord mbr) { for (int j = 0; j < mbr.getNumColumns(); j++) { BlankRecord br = new BlankRecord(); br.setColumn(j + mbr.getFirstColumn()); br.setRow(mbr.getRow()); br.setXFIndex(mbr.getXFAt(j)); insertCell(br); } }
public static String quote(String string) { StringBuilder sb = new StringBuilder(); sb.append("\\Q"); int apos = 0; int k; while ((k = string.indexOf("\\E", apos)) >= 0) { sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q"); apos = k + 2; } return sb.append(string.substring(apos)).append("\\E").toString(); }
public ByteBuffer putInt(int value) { throw new ReadOnlyBufferException(); }
public ArrayPtg(Object[][] values2d) { int nColumns = values2d[0].length; int nRows = values2d.length; _nColumns = (short) nColumns; _nRows = (short) nRows; Object[] vv = new Object[_nColumns * _nRows]; for (int r = 0; r < nRows; r++) { Object[] rowData = values2d[r]; for (int c = 0; c < nColumns; c++) { vv[getValueIndex(c, r)] = rowData[c]; } } _arrayValues = vv; _reserved0Int = 0; _reserved1Short = 0; _reserved2Byte = 0; }
public GetIceServerConfigResult getIceServerConfig(GetIceServerConfigRequest request) { request = beforeClientExecution(request); return executeGetIceServerConfig(request); }
@Override public String toString() { StringBuilder sb = new StringBuilder(64); sb.append(getClass().getName()).append(" ["); sb.append(getValueAsString()); sb.append("]"); return sb.toString(); }
public String toString(String field) { return "ToChildBlockJoinQuery (" + _parentQuery + ")"; }
public void incRef() { refCount.incrementAndGet(); } public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { request = beforeClientExecution(request); return executeUpdateConfigurationSetSendingEnabled(request); }
public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { request = beforeClientExecution(request); return executeUpdateConfigurationSetSendingEnabled(request); }
public int getNextXBATChainOffset() { return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void multiplyByPowerOfTen(int pow10) { TenPower tp = TenPower.GetInstance(Math.abs(pow10)); if (pow10 < 0) { mulShift(tp.getDivisor(), tp.getDivisorShift()); } else { mulShift(tp.getMultiplicand(), tp.getMultiplierShift()); } }
public String toString() { StringBuilder builder = new StringBuilder(); int length = this.getLength(); builder.append(File.separator); for (int i = 0; i < length; i++) { builder.append(this.getComponent(i)); if (i < (length - 1)) { builder.append(File.separator); } } return builder.toString(); }
public void withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) { this.fetcher = fetcher; this.fetcher.setRoleName(roleName); }
public void setProgressMonitor(ProgressMonitor pm) { progressMonitor = pm; }
@Override public void reset() throws IOException { if (!first) { ptr = 0; if (!eof) { parseEntry(); } } }
public E previous() { if (iterator.previousIndex() >= start) { return iterator.previous(); } throw new java.util.NoSuchElementException(); }
public String getNewPrefix() { return this.newPrefix; }
public int indexOfValue(int value) { for (int i = 0; i < mSize; i++) { if (mValues[i] == value) { return i; } } return -1; }
public List<CharsRef> uniqueStems(char[] word, int length) { List<CharsRef> stems = stem(word, length); if (stems.size() < 2) { return stems; } CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase()); List<CharsRef> deduped = new ArrayList<>(); for (CharsRef s : stems) { if (!terms.contains(s)) { deduped.add(s); terms.add(s); } } return deduped; }
public GetGatewayResponsesResponse getGatewayResponses(GetGatewayResponsesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetGatewayResponsesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetGatewayResponsesResponseUnmarshaller.getInstance()); return invoke(request, options, GetGatewayResponsesResponse.class); }
public void setPosition(long position) { currentBlockIndex = (int) (position >> outerInstance.blockBits); currentBlock = outerInstance.blocks[currentBlockIndex]; currentBlockUpto = (int) (position & outerInstance.blockMask); }
@Override public long skip(long n) throws IOException { int s = (int) Math.min(available(), Math.max(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) { this.bootstrapActionConfig = bootstrapActionConfig; }
public void serialize(ILittleEndianOutput out1) {out1.writeShort(field_1_row);out1.writeShort(field_2_col);out1.writeShort(field_3_flags);out1.writeShort(field_4_shapeid);out1.writeShort(field_6_author.length());out1.writeByte(field_5_hasMultibyte ? 0x01 : 0x00);if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_6_author, out1);} else {StringUtil.putCompressedUnicode(field_6_author, out1);}if (field_7_padding != null) {out1.writeByte(Integer.parseInt(field_7_padding, 10));}}
public int lastIndexOf(String str) { return lastIndexOf(str, count); }
public boolean add(E object) { return addLastImpl(object); }
public void unsetSection(String section, String subsection) { ConfigSnapshot src; ConfigSnapshot res; do { src = state.get(); res = unsetSection(src, section, subsection); } while (!state.compareAndSet(src, res)); }
public String getTagName() { return tagName; }
public void addSubRecord(int index, SubRecord element) { subrecords.add(index, element); }
public synchronized boolean remove(Object o) { return c.remove(o); }
public TokenStream create(TokenStream input) { return new DoubleMetaphoneFilter(input, maxCodeLength, inject); }
public long length() throws IOException { return inCoreLength(); }
public void setValue(boolean newValue) { value = newValue; }
public Pair(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public int get(int i) { if (count <= i) { throw new IndexOutOfRangeException(i); } return entries[i]; }
public CreateRepoRequest() { super("cr", "2016-06-07", "CreateRepo", "cr", "openAPI"); setUriPattern("/repos"); setMethod(MethodType.PUT); }
public boolean isDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public void remove() { if (expectedModCount == list.modCount) { if (lastLink != null) { LinkedList.Link<ET> next_1 = lastLink.next; LinkedList.Link<ET> previous_1 = lastLink.previous; next_1.previous = previous_1; previous_1.next = next_1; if (lastLink == link) { pos--; } link = previous_1; lastLink = null; expectedModCount++; list._size--; list.modCount++; } else { throw new java.lang.IllegalStateException(); } } else { throw new java.util.ConcurrentModificationException(); } }
public MergeShardsResponse mergeShards(MergeShardsRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(MergeShardsRequestMarshaller.getInstance()); options.setResponseUnmarshaller(MergeShardsResponseUnmarshaller.getInstance()); return invoke(request, options, clientConfiguration.getApacheHttpClientConfig()); }
public AllocateHostedConnectionResponse allocateHostedConnection(AllocateHostedConnectionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(AllocateHostedConnectionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(AllocateHostedConnectionResponseUnmarshaller.getInstance()); return invoke(request, options, AllocateHostedConnectionResponse.class); }
public int getBeginIndex() { return start; }
public static WeightedTerm[] getTerms(Query query) { return getTerms(query, false); } @Override public ByteBuffer compact() { throw new ReadOnlyBufferException(); }
public ByteBuffer compact() throws ReadOnlyBufferException { throw new ReadOnlyBufferException(); }
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for (int i = 0; i < iterations; ++i) { int byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (int) ((uint) byte0 >> 2); int byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | ((int) ((uint) byte1 >> 4)); int byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 2) | ((int) ((uint) byte2 >> 6)); values[valuesOffset++] = byte2 & 63; } }
public String getHumanishName() { if (getPath() == null || getPatch().isEmpty()) { throw new IllegalArgumentException(); } String s = getPath(); String[] elements; if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) { elements = s.split("[\\" + File.separatorChar + "/]"); } else { elements = s.split("/"); } if (elements.length == 0) { throw new IllegalArgumentException(); } String result = elements[elements.length - 1]; if (Constants.DOT_GIT.equals(result)) { result = elements[elements.length - 2]; } else { if (result.endsWith(Constants.DOT_GIT_EXT)) { result = result.substring(0, result.length() - Constants.DOT_GIT_EXT.length()); } } return result; }
public DescribeNotebookInstanceLifecycleConfigResponse describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { request = beforeClientExecution(request); return executeDescribeNotebookInstanceLifecycleConfig(request); }
public String getAccessKeySecret() { return accessSecret; }
public CreateVpnConnectionResponse createVpnConnection(CreateVpnConnectionRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(CreateVpnConnectionRequestMarshaller.getInstance()); options.setResponseUnmarshaller(CreateVpnConnectionResponseUnmarshaller.getInstance()); return invoke(request, options, CreateVpnConnectionResponse.class); }
public DescribeVoicesResponse describeVoices(DescribeVoicesRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(DescribeVoicesRequestMarshaller.getInstance()); options.setResponseUnmarshaller(DescribeVoicesResponseUnmarshaller.getInstance()); return invoke(request, options, DescribeVoicesResponse.class); }
public ListMonitoringExecutionsResult listMonitoringExecutions(ListMonitoringExecutionsRequest request) { request = beforeClientExecution(request); return executeListMonitoringExecutions(request); }
public DescribeJobRequest(String vaultName, String jobId) {this.vaultName = Objects.requireNonNull(vaultName);this.jobId = Objects.requireNonNull(jobId);}
public EscherRecord getEscherRecord(int index) { return escherRecords[index]; }
public GetApisResponse getApis(GetApisRequest request) { InvokeOptions options = new InvokeOptions(); options.setRequestMarshaller(GetApisRequestMarshaller.getInstance()); options.setResponseUnmarshaller(GetApisResponseUnmarshaller.getInstance()); return invoke(request, options, GetApisResponse.class); }
public DeleteSmsChannelResult deleteSmsChannel(DeleteSmsChannelRequest request) { request = beforeClientExecution(request); return executeDeleteSmsChannel(request); }
public TrackingRefUpdate getTrackingRefUpdate() { return trackingRefUpdate; }
public void print(boolean b) { print(Boolean.toString(b)); }
public IQueryNode getChild() { return getChildren().get(0); }
public NotIgnoredFilter(int workdirTreeIndex) {this.index = workdirTreeIndex;}
public AreaRecord(RecordInputStream in1) {field_1_formatFlags = in1.readShort();}
public GetThumbnailRequest() { super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI"); setProtocol(ProtocolType.HTTPS); }
public DescribeTransitGatewayVpcAttachmentsResult describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { request = beforeClientExecution(request); return executeDescribeTransitGatewayVpcAttachments(request); }
public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { request = beforeClientExecution(request); return executePutVoiceConnectorStreamingConfiguration(request); }
public OrdRange getOrdRange(String dim) {OrdRange result;prefixToOrdRange.TryGetValue(dim, result);return result;}
@Override public String toString() { String symbol = ""; if (startIndex >= 0 && startIndex < ((ICharStream)InputStream).size()) { symbol = ((ICharStream)InputStream).getText(Interval.of(startIndex, startIndex)); symbol = Utils.escapeWhitespace(symbol, false); } return String.format(Locale.getDefault(), "%s('%s')", Antlr4.Runtime.LexerNoViableAltException.class.getName(), symbol); }
public E peek() { return peekFirstImpl(); }
public CreateWorkspacesResult createWorkspaces(CreateWorkspacesRequest request) { request = beforeClientExecution(request); return executeCreateWorkspaces(request); }
@Override public Object clone() { NumberFormatIndexRecord rec = new NumberFormatIndexRecord(); rec.field_1_formatIndex = field_1_formatIndex; return rec; }
