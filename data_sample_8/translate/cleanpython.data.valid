def longestNull ( S ) : arr = [ ] arr . append ( [ '@' , - 1 ] ) maxlen = 0 for i in range ( len ( S ) ) : arr . append ( [ S [ i ] , i ] ) while ( len ( arr ) >= 3 and arr [ len ( arr ) - 3 ] [ 0 ] == '1' and arr [ len ( arr ) - 2 ] [ 0 ] == '0' and arr [ len ( arr ) - 1 ] [ 0 ] == '0' ) : arr . pop ( ) arr . pop ( ) arr . pop ( ) tmp = arr [ - 1 ] maxlen = max ( maxlen , i - tmp [ 1 ] ) return maxlen
def find ( list1 , list2 ) : res = [ ] max_possible_sum = len ( list1 ) + len ( list2 ) - 2 for sum in range ( max_possible_sum + 1 ) : for i in range ( sum + 1 ) : if ( i < len ( list1 ) and ( sum - i ) < len ( list2 ) and list1 [ i ] == list2 [ sum - i ] ) : res . append ( list1 [ i ] ) if ( len ( res ) > 0 ) : break for i in range ( len ( res ) ) : print ( res [ i ] , end = "" )
def isSubsetSum ( arr , n , sum ) : subset = [ [ False for j in range ( sum + 1 ) ] for i in range ( 3 ) ] for i in range ( n + 1 ) : for j in range ( sum + 1 ) : if ( j == 0 ) : subset [ i % 2 ] [ j ] = True elif ( i == 0 ) : subset [ i % 2 ] [ j ] = False elif ( arr [ i - 1 ] <= j ) : subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j - arr [ i - 1 ] ] or subset [ ( i + 1 ) % 2 ] [ j ] else : subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j ] return subset [ n % 2 ] [ sum ]
def MinimumCost ( cost , n , W ) : val = list ( ) wt = list ( ) size = 0 for i in range ( n ) : if ( cost [ i ] != - 1 ) : val . append ( cost [ i ] ) wt . append ( i + 1 ) size += 1 n = size min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ] for i in range ( W + 1 ) : min_cost [ 0 ] [ i ] = INF for i in range ( 1 , n + 1 ) : min_cost [ i ] [ 0 ] = 0 for i in range ( 1 , n + 1 ) : for j in range ( 1 , W + 1 ) : if ( wt [ i - 1 ] > j ) : min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ] else : min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] ) if ( min_cost [ n ] [ W ] == INF ) : return - 1 else : return min_cost [ n ] [ W ]
def perimeter ( diameter , height ) : return 2 * ( diameter + height )
def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) : for i in range ( 0 , n1 ) : for j in range ( 0 , n2 ) : for k in range ( 0 , n3 ) : if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) : return True return False
def findDuplicateparenthesis ( string ) : Stack = [ ] for ch in string : if ch == ')' : top = Stack . pop ( ) elementsInside = 0 while top != '(' : elementsInside += 1 top = Stack . pop ( ) if elementsInside < 1 : return True else : Stack . append ( ch ) return False
def findElement ( arr , ranges , rotations , index ) : for i in range ( rotations - 1 , - 1 , - 1 ) : left = ranges [ i ] [ 0 ] right = ranges [ i ] [ 1 ] if ( left <= index and right >= index ) : if ( index == left ) : index = right else : index = index - 1 return arr [ index ]
