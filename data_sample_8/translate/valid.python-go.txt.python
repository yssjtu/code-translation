def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]: xors = [0] for num in arr: xors.append(xors[-1] ^ num) ans = list() for left, right in queries: ans.append(xors[left] ^ xors[right + 1]) return ans
def getMaximumGenerated(self, n: int) -> int: if n == 0: return 0 nums = [0] * (n + 1) nums[1] = 1 for i in range(2, n + 1): nums[i] = nums[i // 2] + i % 2 * nums[i // 2 + 1] return max(nums)
def hasCycle(self, head: ListNode) -> bool: seen = set() while head: if head in seen: return True seen.add(head) head = head.next return False
def findMaxAverage(self, nums: List[int], k: int) -> float: maxTotal = total = sum(nums[:k]) n = len(nums) for i in range(k, n): total = total - nums[i - k] + nums[i] maxTotal = max(maxTotal, total) return maxTotal / k
def convertToTitle(self, columnNumber: int) -> str: ans = list() while columnNumber > 0: columnNumber -= 1 ans.append(chr(columnNumber % 26 + ord("A"))) columnNumber //= 26 return "".join(ans[::-1])
def diffWaysToCompute(self, input: str) -> List[int]: if input.isdigit(): return [int(input)] res = [] for i, char in enumerate(input): if char in ['+', '-', '*']: left = self.diffWaysToCompute(input[:i]) right = self.diffWaysToCompute(input[i+1:]) for l in left: for r in right: if char == '+': res.append(l + r) elif char == '-': res.append(l - r) else: res.append(l * r) return res
def findMaxConsecutiveOnes(self, nums: List[int]) -> int: maxCount = count = 0 for i, num in enumerate(nums): if num == 1: count += 1 else: maxCount = max(maxCount, count) count = 0 maxCount = max(maxCount, count) return maxCount
def circularArrayLoop(self, nums: List[int]) -> bool: n = len(nums) def next(cur: int) -> int: return (cur + nums[cur]) % n for i, num in enumerate(nums): if num == 0: continue slow, fast = i, next(i) while nums[slow] * nums[fast] > 0 and nums[slow] * nums[next(fast)] > 0: if slow == fast: if slow == next(slow): break return True slow = next(slow) fast = next(next(fast)) add = i while nums[add] * nums[next(add)] > 0: tmp = add add = next(add) nums[tmp] = 0 return False
